// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vSterlin/api-template/internal/app/repository (interfaces: TemplateStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTemplateStore is a mock of TemplateStore interface
type MockTemplateStore struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateStoreMockRecorder
}

// MockTemplateStoreMockRecorder is the mock recorder for MockTemplateStore
type MockTemplateStoreMockRecorder struct {
	mock *MockTemplateStore
}

// NewMockTemplateStore creates a new mock instance
func NewMockTemplateStore(ctrl *gomock.Controller) *MockTemplateStore {
	mock := &MockTemplateStore{ctrl: ctrl}
	mock.recorder = &MockTemplateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplateStore) EXPECT() *MockTemplateStoreMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockTemplateStore) Query(arg0 string) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockTemplateStoreMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTemplateStore)(nil).Query), arg0)
}

// QueryRow mocks base method
func (m *MockTemplateStore) QueryRow(arg0 string, arg1 ...interface{}) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockTemplateStoreMockRecorder) QueryRow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockTemplateStore)(nil).QueryRow), varargs...)
}
